{"version":3,"sources":["Ember.ts","BatteryIcon.tsx","mug.png","App.tsx","index.tsx"],"names":["Uuid","toTemperature","d","getUint16","Event","LiquidState","ConnState","Ember","constructor","setters","_queue","_setters","_device","_chars","this","async","queue","_worker","connected","Object","keys","length","console","info","setConnState","choosing","navigator","bluetooth","requestDevice","filters","name","services","descriptorService","optionalServices","emberService","Error","connecting","addEventListener","e","debug","idle","server","gatt","connect","ember","getPrimaryService","uuid","mugNameChar","drinkTempChar","targetTempChar","liquidLevelChar","batteryChar","liquidStateChar","ledColorChar","char","getCharacteristic","pushEventChar","statisticsChar","startNotifications","_charChanged","ready","getMugName","push","that","cmd","setMugName","args","getDrinkTemperature","getTargetTemperature","setTargetTemperature","temperature","getBattery","getLiquidLevel","getLiquidState","getLedColor","setLedColor","color","encoded","TextEncoder","encode","writeValueWithoutResponse","DataView","ArrayBuffer","setUint16","setUint8","r","g","b","a","readValue","TextDecoder","decode","buffer","_setMugName","setDrinkTemperature","_setTargetTemperature","setLiquidLevel","getUint8","toLevel","setBattery","level","charging","toBattery","setLiquidState","toLiquidState","toColor","_setLedColor","error","event","target","value","what","battery","chargerConnected","chargerDisconnected","targetTemperature","drinkTemperature","liquidLevel","liquidState","byteLength","BatteryIcon","props","icon","0","MdBattery20","MdBattery50","MdBattery60","MdBattery80","MdBattery90","MdBatteryFull","1","MdBatteryCharging20","MdBatteryCharging50","MdBatteryCharging60","MdBatteryCharging80","MdBatteryCharging90","MdBatteryChargingFull","as","Parameter","label","labelRight","children","p","borderRadius","borderColor","borderWidth","direction","css","gap","justifyContent","textColor","textAlign","fontWeight","ColorPicker","onChange","fakeWhite","fullAlpha","c","setC","React","useState","useDebouncyEffect","isWhite","alignItems","width","cr","rgb","className","undefined","colors","onChangeComplete","TemperatureSlider","t","setT","aria-label","defaultValue","min","max","step","flex","onChangeEnd","bg","boxSize","FaThermometerHalf","Connect","onClick","open","setOpen","isOpen","onClose","closeOnBlur","placement","variant","leftIcon","GrConnect","size","alignSelf","Connecting","mx","BatteryIndicator","toFixed","fontSize","MugInfo","ledColor","onNameChange","ledDiv","useRef","useEffect","current","animate","boxShadow","duration","easing","iterations","Infinity","w","position","src","mugPng","objectFit","maxW","left","right","bottom","ref","style","height","transform","AiFillEdit","px","Device","mugName","connState","setError","hasFullState","reduce","full","data","newName","prompt","rawColor","NoBt","GrAlert","h","theme","extendTheme","brand","900","800","700","Centered","App","hasBt","minH","bgColor","py","display","flexDirection","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5c098969.chunk.js","sourcesContent":["// SPDX-License-Identifier: MIT.\n\nimport async from 'async';\n\nexport type RawColor = { r: number, g: number, b: number, a: number };\nexport type Battery = { level: number, charging: boolean };\nexport type Setters = {\n    setMugName: (s: string) => void,\n    setConnState: (cs: ConnState) => void,\n    setDrinkTemperature: (t: number) => void,\n    setTargetTemperature: (t: number) => void,\n    setBattery: (b: (Battery | null | ((b: Battery | null) => Battery | null))) => void,\n    setLiquidLevel: (l: number) => void,\n    setLiquidState: (s: LiquidState) => void,\n    setLedColor: (c: RawColor) => void,\n}\n\nconst btName = 'Ember Ceramic Mug';\n\nenum Uuid {\n    descriptorService = '0000180a-0000-1000-8000-00805f9b34fb',\n    emberService = 'fc543622-236c-4c94-8fa9-944a3e5353fa',\n    mugNameChar = 'fc540001-236c-4c94-8fa9-944a3e5353fa',\n    drinkTempChar = 'fc540002-236c-4c94-8fa9-944a3e5353fa',\n    targetTempChar = 'fc540003-236c-4c94-8fa9-944a3e5353fa',\n    liquidLevelChar = 'fc540005-236c-4c94-8fa9-944a3e5353fa',\n    batteryChar = 'fc540007-236c-4c94-8fa9-944a3e5353fa',\n    liquidStateChar = 'fc540008-236c-4c94-8fa9-944a3e5353fa',\n    ledColorChar = 'fc540014-236c-4c94-8fa9-944a3e5353fa',\n    pushEventChar = 'fc540012-236c-4c94-8fa9-944a3e5353fa',\n    statisticsChar = 'fc540013-236c-4c94-8fa9-944a3e5353fa',\n}\n\nconst temperatureScale = 100;\n\nconst toStr = (d: DataView) => (new TextDecoder()).decode(d.buffer);\nconst toTemperature = (d: DataView) => d.getUint16(0, true) / temperatureScale;\nconst toBattery = (d: DataView): Battery => ({level: d.getUint8(0) / 100, charging: d.getUint8(1) === 1});\nconst toColor = (d: DataView): RawColor => ({r: d.getUint8(0), g: d.getUint8(1), b: d.getUint8(2), a: d.getUint8(3)});\nconst toLevel = (d: DataView): number => d.getUint8(0) / 100;\nconst toLiquidState = (d: DataView): LiquidState => d.getUint8(0);\n\nenum Event {\n    battery = 1, chargerConnected = 2, chargerDisconnected = 3, targetTemperature = 4, drinkTemperature = 5, liquidLevel = 7, liquidState = 8,\n}\n\nexport enum LiquidState {\n  off = 0, empty = 1, cold = 3, tooLow = 5, atTemperature = 6, unknown7 = 7\n}\n\nexport enum ConnState {\n    idle, choosing, connecting, ready,\n}\n\nexport default class Ember {\n    private readonly _queue;\n    private readonly _setters: Setters;\n    private _device: BluetoothDevice | null;\n    private _chars: { [k in Uuid]?: BluetoothRemoteGATTCharacteristic };\n\n    constructor(setters: Setters) {\n        this._setters = setters;\n        this._device = null;\n        this._chars = {};\n        this._queue = async.queue(Ember._worker, 1);\n    }\n\n    connected(): boolean {\n        return Object.keys(this._chars).length !== 0;\n    }\n\n    async connect() {\n        console.info('Connecting');\n        this._setters.setConnState(ConnState.choosing);\n        this._device = await navigator.bluetooth.requestDevice({\n            filters: [{\n                name: btName,\n                services: [Uuid.descriptorService],\n            }],\n            optionalServices: [Uuid.emberService],\n        });\n        if (!this._device) throw new Error('Cevice selection cancelled');\n        this._setters.setConnState(ConnState.connecting);\n        this._device.addEventListener('gattserverdisconnected', (e) => {\n            console.debug('GATT server disconnected');\n            this._chars = {};\n            this._setters.setConnState(ConnState.idle);\n        });\n        const server = await this._device.gatt?.connect();\n        if (!server) throw new Error('Cannot connect');\n        const ember = await server?.getPrimaryService(Uuid.emberService);\n        if (!ember) throw new Error('Cannot get primary service');\n        for (const uuid of [\n            Uuid.mugNameChar,\n            Uuid.drinkTempChar,\n            Uuid.targetTempChar,\n            Uuid.liquidLevelChar,\n            Uuid.batteryChar,\n            Uuid.liquidStateChar,\n            Uuid.ledColorChar]) {\n            const char = await ember!.getCharacteristic(uuid);\n            if (!char) throw new Error(`Cannot get characteristic ${uuid}`);\n            this._chars[uuid] = char;\n        }\n        for (const uuid of [Uuid.pushEventChar, Uuid.statisticsChar]) {\n            const char = await ember!.getCharacteristic(uuid);\n            if (!char) throw new Error(`Cannot get characteristic ${uuid}`);\n            await char.startNotifications();\n            char.addEventListener('characteristicvaluechanged', (e) => Ember._charChanged(this, e));\n            this._chars[uuid] = char;\n        }\n        this._setters.setConnState(ConnState.ready);\n    }\n\n    getMugName() {\n        this._queue.push({that: this, cmd: 'getMugName'});\n    }\n\n    setMugName(name: string) {\n        this._queue.push({that: this, cmd: 'setMugName', args: [name]});\n    }\n\n     getDrinkTemperature() {\n        this._queue.push({that: this, cmd: 'getDrinkTemperature'});\n    }\n\n     getTargetTemperature() {\n        this._queue.push({that: this, cmd: 'getTargetTemperature'});\n    }\n\n     setTargetTemperature(temperature: number) {\n        this._queue.push({that: this, cmd: 'setTargetTemperature', args: [temperature]});\n    }\n\n     getBattery() {\n        this._queue.push({that: this, cmd: 'getBattery'});\n    }\n\n     getLiquidLevel() {\n        this._queue.push({that: this, cmd: 'getLiquidLevel'});\n    }\n\n     getLiquidState() {\n         this._queue.push({that: this, cmd: 'getLiquidState'});\n    }\n\n     getLedColor() {\n        this._queue.push({that: this, cmd: 'getLedColor'});\n    }\n\n     setLedColor(color: RawColor) {\n         this._queue.push({that: this, cmd: 'setLedColor', args: [color]});\n    }\n\n    private async _setMugName(name: string) {\n        const encoded = (new TextEncoder()).encode(name);\n        await this._chars[Uuid.mugNameChar]!.writeValueWithoutResponse(encoded);\n        this.getMugName();\n    }\n\n    private async _setTargetTemperature(temperature: number) {\n        if (temperature < 50.0) temperature = 50.0;\n        if (temperature > 65.5) temperature = 65.5;\n        const d = new DataView(new ArrayBuffer(2));\n        d.setUint16(0, temperature * temperatureScale, true);\n        await this._chars[Uuid.targetTempChar]!.writeValueWithoutResponse(d);\n        this.getTargetTemperature();\n    }\n\n    private async _setLedColor(color: RawColor) {\n        const d = new DataView(new ArrayBuffer(4));\n        d.setUint8(0, color.r);\n        d.setUint8(1, color.g);\n        d.setUint8(2, color.b);\n        d.setUint8(3, color.a);\n        await this._chars[Uuid.ledColorChar]!.writeValueWithoutResponse(d);\n        this.getLedColor();\n    }\n\n    private static async _worker({that, cmd, args}: { cmd: string, args?: any, that: Ember }) {\n        if (!that.connected()) {\n            console.error('not connected');\n            return;\n        }\n        switch (cmd) {\n            case 'getMugName':\n                that._setters.setMugName(toStr(await that._chars[Uuid.mugNameChar]!.readValue()));\n                break;\n            case 'setMugName':\n                const [name] = args;\n                await that._setMugName(name);\n                break;\n            case 'getDrinkTemperature':\n                that._setters.setDrinkTemperature(toTemperature(await that._chars[Uuid.drinkTempChar]!.readValue()));\n                break;\n            case 'getTargetTemperature':\n                that._setters.setTargetTemperature(toTemperature(await that._chars[Uuid.targetTempChar]!.readValue()));\n                break;\n            case 'setTargetTemperature':\n                const [temperature] = args;\n                await that._setTargetTemperature(temperature);\n                break;\n            case 'getLiquidLevel':\n                that._setters.setLiquidLevel(toLevel(await that._chars[Uuid.liquidLevelChar]!.readValue()));\n                break;\n            case 'getBattery':\n                that._setters.setBattery(toBattery(await that._chars[Uuid.batteryChar]!.readValue()));\n                break;\n            case 'getLiquidState':\n                that._setters.setLiquidState(toLiquidState(await that._chars[Uuid.liquidStateChar]!.readValue()));\n                break;\n            case 'getLedColor':\n                that._setters.setLedColor(toColor(await that._chars[Uuid.ledColorChar]!.readValue()));\n                break;\n            case 'setLedColor':\n                const [color] = args;\n                await that._setLedColor(color);\n                break;\n        }\n    }\n\n    private static async _charChanged(that: Ember, event: any) {\n        const char: BluetoothRemoteGATTCharacteristic = event.target, value = char.value!;\n        switch (char.uuid) {\n            case Uuid.pushEventChar:\n                let what = value.getUint8(0);\n                console.debug(`Characteristic ${Event[what]} changed`);\n                switch (what) {\n                    case Event.battery:\n                        await that.getBattery();\n                        break;\n                    case Event.chargerConnected:\n                        that._setters.setBattery((b) => ({...b!, charging: true}));\n                        break;\n                    case Event.chargerDisconnected:\n                        that._setters.setBattery((b) => ({...b!, charging: false}));\n                        break;\n                    case Event.targetTemperature:\n                        await that.getTargetTemperature();\n                        break;\n                    case Event.drinkTemperature:\n                        await that.getDrinkTemperature();\n                        break;\n                    case Event.liquidLevel:\n                        await that.getLiquidLevel();\n                        break;\n                    case Event.liquidState:\n                        await that.getLiquidState();\n                        break;\n                }\n                break;\n            case Uuid.statisticsChar:\n                console.debug('Got statistics:', value.byteLength, value.buffer);\n                break;\n        }\n    }\n};\n","import {MdBattery20} from '@react-icons/all-files/md/MdBattery20';\nimport {MdBattery50} from '@react-icons/all-files/md/MdBattery50';\nimport {MdBattery60} from '@react-icons/all-files/md/MdBattery60';\nimport {MdBattery80} from '@react-icons/all-files/md/MdBattery80';\nimport {MdBattery90} from '@react-icons/all-files/md/MdBattery90';\nimport {MdBatteryFull} from '@react-icons/all-files/md/MdBatteryFull';\nimport {MdBatteryCharging20} from '@react-icons/all-files/md/MdBatteryCharging20';\nimport {MdBatteryCharging50} from '@react-icons/all-files/md/MdBatteryCharging50';\nimport {MdBatteryCharging60} from '@react-icons/all-files/md/MdBatteryCharging60';\nimport {MdBatteryCharging80} from '@react-icons/all-files/md/MdBatteryCharging80';\nimport {MdBatteryCharging90} from '@react-icons/all-files/md/MdBatteryCharging90';\nimport {MdBatteryChargingFull} from '@react-icons/all-files/md/MdBatteryChargingFull';\nimport {Icon} from '@chakra-ui/react';\n\nimport {Battery} from './Ember';\n\nexport default function BatteryIcon({battery: {level, charging}, ...props}: { battery: Battery } & Record<string, any>) {\n    const icons = {\n        0: [MdBattery20, MdBattery50, MdBattery60, MdBattery80, MdBattery90, MdBatteryFull],\n        1: [MdBatteryCharging20, MdBatteryCharging50, MdBatteryCharging60, MdBatteryCharging80, MdBatteryCharging90, MdBatteryChargingFull],\n    };\n    const i: number = level <= .2 ? 0 : level <= .5 ? 1 : level <= .6 ? 2 : level <= .8 ? 3 : level <= .9 ? 4 : 5;\n    const icon = icons[charging ? 1 : 0][i];\n    return (<Icon as={icon} {...(level < .2 ? {color: 'orange.600'} : {})} {...props}/>);\n}\n","export default __webpack_public_path__ + \"static/media/mug.07a824a1.png\";","// SPDX-License-Identifier: MIT.\n\nimport React from 'react';\nimport {useDebouncyEffect} from 'use-debouncy';\nimport {CirclePicker, HuePicker, RGBColor} from 'react-color';\nimport {\n    Box,\n    Button,\n    ChakraProvider,\n    Container,\n    ContainerProps,\n    extendTheme,\n    Flex,\n    Heading,\n    Icon,\n    IconButton,\n    Img,\n    Popover,\n    PopoverBody,\n    PopoverContent,\n    PopoverHeader,\n    PopoverTrigger,\n    Slider,\n    SliderFilledTrack,\n    SliderThumb,\n    SliderTrack,\n    Spinner,\n    Text,\n} from '@chakra-ui/react';\nimport {GrConnect} from '@react-icons/all-files/gr/GrConnect';\nimport {FaThermometerHalf} from '@react-icons/all-files/fa/FaThermometerHalf';\nimport {GrAlert} from '@react-icons/all-files/gr/GrAlert';\nimport {AiFillEdit} from '@react-icons/all-files/ai/AiFillEdit';\n\nimport Ember, {Battery, ConnState, RawColor} from './Ember';\nimport BatteryIcon from './BatteryIcon';\nimport mugPng from './mug.png';\nimport './App.css';\n\nconst Parameter = ({\n                       label,\n                       labelRight,\n                       children\n                   }: { label: string, labelRight?: React.ReactNode, children: React.ReactNode }) => (\n    <Flex p={4} borderRadius={12} borderColor=\"gray.400\" borderWidth={1} direction=\"column\" css={{gap: '.6rem'}}>\n        <Flex direction=\"row\" justifyContent=\"space-between\">\n            <Text textColor=\"gray.600\" textAlign=\"left\" fontWeight=\"light\">{label}</Text>\n            {labelRight !== null && labelRight}\n        </Flex>\n        {children}\n    </Flex>);\n\nconst ColorPicker = ({color, onChange}: { color: RawColor, onChange: (color: RawColor) => void }) => {\n    // It's important to provide the full 6-char hex, as fucking CirclePicker does no normalization whatsoever.\n    const fakeWhite = \"#bbbbbb\";\n\n    const fullAlpha = {...color, a: 1} as RGBColor;\n    const [c, setC] = React.useState<RGBColor>(fullAlpha);\n    useDebouncyEffect(() => onChange({...c, a: 255} as RawColor), 500, [c]);\n\n    function setWhite() {\n        setC({r: 255, g: 255, b: 255, a: 1});\n    }\n\n    const isWhite: boolean = c.r === 255 && c.g === 255 && c.b === 255;\n\n    return (\n        <Flex direction=\"row\" alignItems=\"center\" css={{gap: \"1rem\"}}>\n            <HuePicker width=\"100%\" color={c} onChange={(cr) => setC(cr.rgb)} className={isWhite ? \"no-value\" : \"\"}/>\n            <CirclePicker width=\"\" color={isWhite ? fakeWhite : undefined} colors={[fakeWhite]}\n                          onChangeComplete={setWhite}/>\n        </Flex>\n    );\n}\n\nconst TemperatureSlider = ({temperature, onChange}: { temperature: number, onChange: any }) => {\n    const [t, setT] = React.useState(temperature);\n    return (\n        <Parameter label=\"Target temperature\"\n                   labelRight={<Text textColor=\"gray.600\" textAlign=\"right\" fontWeight=\"semibold\">{`${t}°C`}</Text>}>\n            <Flex direction=\"row\" css={{gap: \"1rem\"}} justifyContent=\"center\">\n                <Text fontWeight=\"light\" textColor=\"gray.400\">50.0</Text>\n                <Slider aria-label=\"slider-ex-4\" defaultValue={50.0} min={50.0} max={65.5} step={0.5} flex={1} value={t}\n                        onChange={setT} onChangeEnd={() => onChange(t)}>\n                    <SliderTrack bg=\"gray.300\"><SliderFilledTrack bg=\"brand.900\"/></SliderTrack>\n                    <SliderThumb boxSize={6}><Box color=\"brand.900\" as={FaThermometerHalf}/></SliderThumb>\n                </Slider>\n                <Text fontWeight=\"light\" textColor=\"gray.400\">65.5</Text>\n            </Flex>\n        </Parameter>\n    );\n}\n\nfunction Connect({onClick, error}: { onClick: any, error: string | null }) {\n    const [open, setOpen] = React.useState(error != null);\n    return (\n        <Flex direction=\"column\" justifyContent=\"space-evenly\" flex={1}>\n            <Popover isOpen={open} onClose={() => setOpen(false)} closeOnBlur={false} placement=\"bottom\">\n                <PopoverTrigger>\n                    <Button variant=\"outline\" onClick={onClick} leftIcon={<GrConnect/>} size=\"lg\">\n                        <Text>Connect</Text>\n                    </Button>\n                </PopoverTrigger>\n                <PopoverContent>\n                    <PopoverHeader fontWeight=\"semibold\">Error</PopoverHeader>\n                    <PopoverBody>\n                        <Text>{error}</Text>\n                    </PopoverBody>\n                </PopoverContent>\n            </Popover>\n            <Text alignSelf=\"flex-end\" textColor=\"gray.400\">\n                Don't forget to power-on the mug using its button.\n                If the list of devices remains empty, put the mug in pairing mode by holding its button for a few\n                seconds.\n                The light will flash blue and the mug should appear in the device list.\n            </Text>\n        </Flex>);\n}\n\nfunction Connecting({children}: { children?: JSX.Element }) {\n    return (\n        <Flex direction=\"row\" alignSelf=\"center\" alignItems=\"center\" justifyContent=\"center\">\n            <Spinner mx={2}/>\n            {children}\n        </Flex>);\n}\n\nfunction BatteryIndicator({battery}: { battery: Battery }) {\n    return (\n        <Flex direction=\"row\" alignSelf=\"center\" alignItems=\"center\" justifyContent=\"space-between\">\n            <Flex direction=\"row\" css={{gap: \".2rem\"}} alignItems=\"center\">\n                <BatteryIcon battery={battery}/>\n                <Text>\n                    {(battery.level * 100).toFixed(0)}%\n                    <Text as=\"span\" textColor=\"gray.400\"\n                          fontSize=\"sm\"> {battery.charging ? 'charging' : 'discharging'}</Text>\n                </Text>\n            </Flex>\n        </Flex>);\n}\n\nconst MugInfo = ({\n                     temperature,\n                     name,\n                     battery,\n                     ledColor,\n                     onNameChange,\n                     liquidLevel\n                 }: { temperature: number, name: string, battery: Battery, ledColor: RawColor, liquidLevel: number, onNameChange: () => void }) => {\n    const ledDiv = React.useRef(null);\n    React.useEffect(() => {\n        if (!ledDiv.current || !ledColor) return;\n        const r = ledColor.r, g = ledColor.g, b = ledColor.b;\n        (ledDiv.current as HTMLElement).animate([\n            {boxShadow: `inset 0 0 90px rgba(${r},${g},${b},1.0), 0 0 4px 4px rgba(${r},${g},${b},0.4)`},\n            {boxShadow: `inset 0 0 90px rgba(${r},${g},${b},1.0), 0 0 7px 7px rgba(${r},${g},${b},0.6)`},\n        ], {\n            duration: 1500,\n            easing: 'ease',\n            direction: 'alternate',\n            iterations: Infinity,\n        });\n    }, [ledDiv, ledColor]);\n    return (<Flex direction=\"row\" w=\"100%\">\n        <Box position=\"relative\" alignSelf=\"center\">\n            <Img src={mugPng} objectFit=\"contain\" maxW=\"19vh\"/>\n            <Text as=\"span\" textColor=\"white\" fontSize=\"sm\"\n                  position=\"absolute\"\n                  textAlign=\"center\"\n                  left=\"0\"\n                  right=\"calc(19vh*0.22)\"\n                  bottom={`calc(34px + ${liquidLevel} * (19vh * 0.57))`}\n            >{liquidLevel === 0 ? 'Empty' : `${(liquidLevel * 100).toFixed(0)}% full`}</Text>\n            <div ref={ledDiv} style={{\n                position: 'absolute',\n                width: '40px',\n                height: '40px',\n                bottom: '-6px',\n                right: 'calc(19vh * 0.33 + 40px/2)',\n                borderRadius: '50%',\n                transform: 'scale(.8, .12)',\n            }}/>\n        </Box>\n        <Flex direction=\"column\" flex={1} alignItems=\"center\">\n            <Flex direction=\"row\" alignItems=\"center\">\n                <Heading fontSize=\"lg\" fontWeight=\"semibold\">{name}</Heading>\n                <IconButton variant=\"ghost\" aria-label=\"Rename\" icon={<AiFillEdit/>} onClick={onNameChange} px={4}/>\n            </Flex>\n            <Text fontSize=\"5xl\">{temperature.toFixed(1)}°C</Text>\n            <BatteryIndicator battery={battery}/>\n        </Flex>\n    </Flex>);\n}\n\nfunction Device() {\n    const [mugName, setMugName] = React.useState<string | null>(null);\n    const [drinkTemperature, setDrinkTemperature] = React.useState<number | null>(null);\n    const [targetTemperature, setTargetTemperature] = React.useState<number | null>(null);\n    const [liquidLevel, setLiquidLevel] = React.useState<number | null>(null);\n    const [liquidState, setLiquidState] = React.useState<number | null>(null);\n    const [battery, setBattery] = React.useState<Battery | null>(null);\n    const [ledColor, setLedColor] = React.useState<RawColor | null>(null);\n\n    const [connState, setConnState] = React.useState<ConnState>(ConnState.idle);\n    const [ember,] = React.useState<Ember>(new Ember({\n        setMugName,\n        setConnState,\n        setDrinkTemperature,\n        setTargetTemperature,\n        setLiquidLevel,\n        setLiquidState,\n        setBattery,\n        setLedColor,\n    }));\n\n    const [error, setError] = React.useState<string | null>(null);\n\n    async function connect() {\n        setError(null);\n        try {\n            await ember.connect();\n        } catch (e) {\n            setError(`${e}`);\n            setConnState(ConnState.idle);\n        }\n    }\n\n    // Initial read once connected.\n    React.useEffect(() => {\n        if (!ember.connected() || connState !== ConnState.ready) return;\n        (async () => {\n            ember.getMugName();\n            ember.getDrinkTemperature();\n            ember.getBattery();\n            ember.getTargetTemperature();\n            ember.getLiquidLevel();\n            ember.getLedColor();\n            ember.getLiquidState();\n        })();\n    }, [ember, connState]);\n\n    const hasFullState = [mugName, drinkTemperature, battery, targetTemperature, liquidLevel, ledColor, liquidState]\n        .reduce((full, data: null | any) => full && data !== null, true);\n\n    function promptAndSendName() {\n        if (mugName === null) return;\n        const newName = prompt('Set mug name', mugName);\n        if (newName === null) return;\n        ember.setMugName(newName);\n    }\n\n    function sendLedColor(rawColor: RawColor) {\n        ember.setLedColor(rawColor);\n    }\n\n    function sendTargetTemperature(temperature: number) {\n        ember.setTargetTemperature(temperature);\n    }\n\n    return (<>{\n        (connState === ConnState.idle && (\n            <Connect onClick={connect} error={error}/>))\n        || ((connState === ConnState.choosing) && (\n            <Connecting><Text>Choosing the device…</Text></Connecting>))\n        || ((connState === ConnState.connecting) && (\n            <Connecting><Text>Connecting…</Text></Connecting>))\n        || ((connState === ConnState.ready && !hasFullState) && (\n            <Connecting><Text>Reading mug state…</Text></Connecting>))\n        || ((connState === ConnState.ready && hasFullState) && (\n            <>\n                <MugInfo temperature={drinkTemperature!}\n                         name={mugName!}\n                         battery={battery!}\n                         ledColor={ledColor!}\n                         liquidLevel={liquidLevel!}\n                         onNameChange={promptAndSendName}/>\n                <TemperatureSlider temperature={targetTemperature!} onChange={sendTargetTemperature}/>\n                <Parameter label=\"LED color\">\n                    <ColorPicker color={ledColor!} onChange={sendLedColor}/>\n                </Parameter>\n            </>\n        ))\n    }</>);\n}\n\nfunction NoBt() {\n    return (\n        <Flex direction=\"column\" alignItems=\"center\" css={{gap: \"1rem\"}}>\n            <Icon as={GrAlert} w={10} h={10}/>\n            <Heading>Unsupported browser</Heading>\n            <Text>Please use a browser with Bluetooth support, such as Chrome for Android.</Text>\n        </Flex>\n    );\n}\n\nconst colors = {\n    brand: {\n        900: 'hsl(14,82%,53%)',\n        800: 'hsl(14,82%,57%)',\n        700: 'hsl(14,82%,61%)',\n    }\n}\nconst theme = extendTheme({colors});\n\nconst Centered = ({children, ...props}: { children: React.ReactNode } & ContainerProps) => (\n    <Container maxW=\"min(96vw, 700px)\" {...props}>{children}</Container>);\n\nfunction App() {\n    const hasBt = !!navigator.bluetooth;\n    return (\n        <ChakraProvider theme={theme}>\n            <Flex minH=\"100%\" direction=\"column\">\n                <Box bgColor=\"brand.900\" textColor=\"gray.50\" py={4}>\n                    <Centered><Heading textAlign=\"center\">mugctl</Heading></Centered>\n                </Box>\n                <Centered flex={1} display=\"flex\" flexDirection=\"column\" justifyContent=\"space-around\">\n                    {hasBt ? <Device/> : <NoBt/>}\n                </Centered>\n            </Flex>\n        </ChakraProvider>\n    );\n}\n\nexport default App;\n","// SPDX-License-Identifier: MIT.\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}